library(caret)
library(e1071)
library(caTools)
library(class)
library(varhandle)

datalat = read.csv("finalskripsi.csv")
datalat$kelas = factor(datalat$kelas, levels = c(0, 1))

#folds = createFolds(datalat$kelas, k = 10)

cvsvmlinear = lapply(folds, function(x) { 
  training_fold = datalat[-x, ] 
  test_fold = datalat[x, ]
  classifier = svm(formula = kelas ~ .,
                   data = training_fold,
                   type = 'C-classification',
                   kernel = 'linear')
  y_pred = predict(classifier, newdata = test_fold)
  cm = table(test_fold[,23],y_pred)
  accuracy = (cm[1,1] + cm[2,2]) / (cm[1,1] + cm[2,2] + cm[1,2] + cm[2,1])
  sensitivitas = (cm[2,2]) / (cm[2,1] + cm[2,2])
  specifisitas = (cm[1,1]) / (cm[1,1] + cm[1,2])
  
  total = list("accuracy" = accuracy, "sensitivitas" = sensitivitas, "prediksi" = y_pred, "table" = cm, "spesifisitas" = specifisitas)
  total
})

accuracylinear = mean(as.numeric(sapply(cvsvmlinear,"[[", 1)))
sensilinear = mean(as.numeric(sapply(cvsvmlinear,"[[", 2)))
prediksilinear = sapply(cvsvmlinear,"[[", 3)
spesilinear =  mean(as.numeric(sapply(cvsvmlinear,"[[", 5)))


cvsvmradial = lapply(folds, function(x) { 
  training_fold = datalat[-x, ] 
  test_fold = datalat[x, ]
  classifier = svm(formula = kelas ~ .,
                   data = training_fold,
                   type = 'C-classification',
                   kernel = 'radial')
  y_pred = predict(classifier, newdata = test_fold)
  cm = table(test_fold[,23],y_pred)
  accuracy = (cm[1,1] + cm[2,2]) / (cm[1,1] + cm[2,2] + cm[1,2] + cm[2,1])
  sensitivitas = (cm[2,2]) / (cm[2,1] + cm[2,2])
  specifisitas = (cm[1,1]) / (cm[1,1] + cm[1,2])
  
  total = list("accuracy" = accuracy, "sensitivitas" = sensitivitas, "prediksi" = y_pred, "table" = cm, "spesifisitas" = specifisitas)
  total
})
accuracyradial = mean(as.numeric(sapply(cvsvmradial,"[[", 1)))
sensiradial = mean(as.numeric(sapply(cvsvmradial,"[[", 2)))
prediksiradial = sapply(cvsvmradial,"[[", 3)
spesiradial =  mean(as.numeric(sapply(cvsvmradial,"[[", 5)))

cvsvmpolynomial = lapply(folds, function(x) { 
  training_fold = datalat[-x, ] 
  test_fold = datalat[x, ]
  classifier = svm(formula = kelas ~ .,
                   data = training_fold,
                   type = 'C-classification',
                   kernel = 'polynomial'
                   )
  y_pred = predict(classifier, newdata = test_fold)
  cm = table(test_fold[,23],y_pred)
  accuracy = (cm[1,1] + cm[2,2]) / (cm[1,1] + cm[2,2] + cm[1,2] + cm[2,1])
  sensitivitas = (cm[2,2]) / (cm[2,1] + cm[2,2])
  specifisitas = (cm[1,1]) / (cm[1,1] + cm[1,2])
  
  total = list("accuracy" = accuracy, "sensitivitas" = sensitivitas, "prediksi" = y_pred, "table" = cm, "spesifisitas" = specifisitas)
  total
})

accuracypolynomial = mean(as.numeric(sapply(cvsvmpolynomial,"[[", 1)))
sensipolynomial = mean(as.numeric(sapply(cvsvmpolynomial,"[[", 2)))
prediksipolynomial = sapply(cvsvmpolynomial,"[[", 3)
spesipolynomial =  mean(as.numeric(sapply(cvsvmpolynomial,"[[", 5)))


cvsvmsigmoid = lapply(folds, function(x) { 
  training_fold = datalat[-x, ] 
  test_fold = datalat[x, ]
  classifier = svm(formula = kelas ~ .,
                   data = training_fold,
                   type = 'C-classification',
                   kernel = 'sigmoid')
  y_pred = predict(classifier, newdata = test_fold)
  cm = table(test_fold[,23],y_pred)
  accuracy = (cm[1,1] + cm[2,2]) / (cm[1,1] + cm[2,2] + cm[1,2] + cm[2,1])
  sensitivitas = (cm[2,2]) / (cm[2,1] + cm[2,2])
  specifisitas = (cm[1,1]) / (cm[1,1] + cm[1,2])
  
  total = list("accuracy" = accuracy, "sensitivitas" = sensitivitas, "prediksi" = y_pred, "table" = cm, "spesifisitas" = specifisitas)
  total
})
accuracysigmoid = mean(as.numeric(sapply(cvsvmsigmoid,"[[", 1)))
sensisigmoid = mean(as.numeric(sapply(cvsvmsigmoid,"[[", 2)))
prediksisigmoid = sapply(cvsvmsigmoid,"[[", 3)
spesisigmoid =  mean(as.numeric(sapply(cvsvmsigmoid,"[[", 5)))

cvknntiga = lapply(folds, function(x) { 
  training_fold = datalat[-x, ] 
  test_fold = datalat[x, ]
  classifier = knn(train = training_fold[,-23],test = test_fold[,-23], cl = training_fold[,23], k = 3)
  #classifier = knn <- train(kelas ~ ., data = training_fold, method = "knn", preProcess = c("center","scale"), tuneLength = 20)
  cm = table(test_fold[,23],classifier)
  accuracy = (cm[1,1] + cm[2,2]) / (cm[1,1] + cm[2,2] + cm[1,2] + cm[2,1])
  sensitivitas = (cm[2,2]) / (cm[2,1] + cm[2,2])
  specifisitas = (cm[1,1]) / (cm[1,1] + cm[1,2])
  
  total = list("accuracy" = accuracy, "sensitivitas" = sensitivitas, "prediksi" = classifier, "table" = cm, "spesifisitas" = specifisitas)
  total
})
accuracyknntiga = mean(as.numeric(sapply(cvknntiga,"[[", 1)))
sensiknntiga = mean(as.numeric(sapply(cvknntiga,"[[", 2)))
prediksiknntiga = sapply(cvknntiga,"[[", 3)
spesiknntiga =  mean(as.numeric(sapply(cvknntiga,"[[", 5)))

cvknnlima = lapply(folds, function(x) { 
  training_fold = datalat[-x, ] 
  test_fold = datalat[x, ]
  classifier = knn(train = training_fold[,-23],test = test_fold[,-23], cl = training_fold[,23], k = 5)
  #classifier = knn <- train(kelas ~ ., data = training_fold, method = "knn", preProcess = c("center","scale"), tuneLength = 20)
  cm = table(test_fold[,23],classifier)
  accuracy = (cm[1,1] + cm[2,2]) / (cm[1,1] + cm[2,2] + cm[1,2] + cm[2,1])
  sensitivitas = (cm[2,2]) / (cm[2,1] + cm[2,2])
  specifisitas = (cm[1,1]) / (cm[1,1] + cm[1,2])
  
  total = list("accuracy" = accuracy, "sensitivitas" = sensitivitas, "prediksi" = classifier, "table" = cm, "spesifisitas" = specifisitas)
  total
})
accuracyknnlima = mean(as.numeric(sapply(cvknnlima,"[[", 1)))
sensiknnlima = mean(as.numeric(sapply(cvknnlima,"[[", 2)))
prediksiknnlima = sapply(cvknnlima,"[[", 3)
spesiknnlima =  mean(as.numeric(sapply(cvknnlima,"[[", 5)))

cvknntujuh = lapply(folds, function(x) { 
  training_fold = datalat[-x, ] 
  test_fold = datalat[x, ]
  classifier = knn(train = training_fold[,-23],test = test_fold[,-23], cl = training_fold[,23], k = 7)
  #classifier = knn <- train(kelas ~ ., data = training_fold, method = "knn", preProcess = c("center","scale"), tuneLength = 20)
  cm = table(test_fold[,23],classifier)
  accuracy = (cm[1,1] + cm[2,2]) / (cm[1,1] + cm[2,2] + cm[1,2] + cm[2,1])
  sensitivitas = (cm[2,2]) / (cm[2,1] + cm[2,2])
  specifisitas = (cm[1,1]) / (cm[1,1] + cm[1,2])
  
  total = list("accuracy" = accuracy, "sensitivitas" = sensitivitas, "prediksi" = classifier, "table" = cm, "spesifisitas" = specifisitas)
  total
})
accuracyknntujuh = mean(as.numeric(sapply(cvknntujuh,"[[", 1)))
sensiknntujuh = mean(as.numeric(sapply(cvknntujuh,"[[", 2)))
prediksiknntujuh = sapply(cvknntujuh,"[[", 3)
spesiknntujuh =  mean(as.numeric(sapply(cvknntujuh,"[[", 5)))

removedfolds = unlist(folds);
removeattribute = attr(removedfolds, "names") <- NULL

tabellinear = as.data.frame(removedfolds)
tabelradial = as.data.frame(removedfolds)
tabelpolynomial = as.data.frame(removedfolds)
tabelsigmoid = as.data.frame(removedfolds)
tabelknntiga = as.data.frame(removedfolds)
tabelknnlima = as.data.frame(removedfolds)
tabelknntujuh = as.data.frame(removedfolds)

hasillinear = unlist(prediksilinear)
hasilradial = unlist(prediksiradial)
hasilpolynomial = unlist(prediksipolynomial)
hasilsigmoid = unlist(prediksisigmoid)
hasilknntiga = unlist(prediksiknntiga)
hasilknnlima = unlist(prediksiknnlima)
hasilknntujuh = unlist(prediksiknntujuh)

# hasillinear = attr(hasillinear, "names") <- NULL
# hasilradial = attr(hasilradial, "names") <- NULL
# hasilpolynomial = attr(hasilpolynomial, "names") <- NULL
# hasilsigmoid = attr(hasilsigmoid, "names") <- NULL
# hasilknntiga = attr(hasilknntiga, "names") <- NULL
# hasilknnlima = attr(hasilknnlima, "names") <- NULL
# hasilknntujuh = attr(hasilknntujuh, "names") <- NULL

tabellinear$hasil = as.data.frame(hasillinear)
tabelradial$hasil = as.data.frame(hasilradial)
tabelpolynomial$hasil = as.data.frame(hasilpolynomial)
tabelsigmoid$hasil = as.data.frame(hasilsigmoid)
tabelknntiga$hasil = as.data.frame(hasilknntiga)
tabelknnlima$hasil = as.data.frame(hasilknnlima)
tabelknntujuh$hasil = as.data.frame(hasilknntujuh)


rangkumantabel = as.data.frame(removedfolds)
rangkumantabel$knntiga = tabelknntiga$hasil
rangkumantabel$knnlima = tabelknnlima$hasil
rangkumantabel$knntujuh = tabelknntujuh$hasil
rangkumantabel$linear = tabellinear$hasil
rangkumantabel$radial = tabelradial$hasil
rangkumantabel$polynomial = tabelpolynomial$hasil
rangkumantabel$sigmoid = tabelsigmoid$hasil












